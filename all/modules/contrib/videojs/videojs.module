<?php

/**
 * @file
 * Provides an HTML5-compatible with Flash-fallback video player.
 *
 * This module provides functionality for loading the videojs library and
 * formatters for CCK FileFields.
 */

/**
 * Implementation of hook_menu().
 */
function videojs_menu() {
  $items = array();

  $items['admin/config/media/videojs'] = array(
    'title' => 'VideoJS Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('videojs_settings_form'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Configure the settings for the VideoJS module.',
    'file' => 'includes/videojs.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function videojs_theme() {
  return array(
    'videojs' => array(
      'variables' => array('items' => NULL, 'player_id' => NULL, 'attributes' => NULL),
      'template' => 'theme/videojs',
      'file' => 'includes/videojs.theme.inc',
    ),
    'videojs_view' => array(
      'variables' => array('items' => NULL, 'player_id' => NULL, 'attributes' => NULL),
      'template' => 'theme/videojs',
      'file' => 'includes/videojs.theme.inc',
    ),
  );
}

/**
 * Implementation of Views' hook_views_api().
 */
function videojs_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'videojs') . '/includes',
  );
}

/**
 * Implementation of CCK's hook_field_formatter_info().
 */
function videojs_field_formatter_info() {
  return array(
    'videojs' => array(
      'label' => t('VideoJS : HTML5 Video Player'),
      'field types' => array('file', 'video', 'media'),
      'description' => t('Display a video file as an HTML5-compatible with Flash-fallback video player.'),
    )
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function videojs_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  switch ($display['type']) {
    case 'videojs':
      $element = array(
        '#theme' => 'videojs',
        '#items' => $items,
        '#player_id' => 'videojs-' . $id . '-' . str_replace('_', '-', $instance['field_name']),
      );
      break;
  }
  $element['#attached'] = videojs_add(FALSE);
  return $element;
}

/**
 * Add the videojs library to the page.
 *
 * @param $add
 *   By default this function will add videojs to the page JavaScript array
 *   directly. If wanting to store the videojs file as an #attached property,
 *   set this to FALSE and videojs_add() will only return the needed array
 *   suitable for use as an #attached property.
 */
function videojs_add($add = TRUE) {
  static $added = FALSE;

  $directory = variable_get('videojs_directory', 'sites/all/libraries/video-js');
  $return = FALSE;
  if (file_exists($directory . '/video.js')) {
    $filepath = $directory . '/video.js';
    $filepath_css = $directory . '/video-js.css';
  }

  if (isset($filepath)) {
    $videojs_js = drupal_get_path('module', 'videojs') . '/theme/videojs.js';
    $videojs_css = drupal_get_path('module', 'videojs') . '/theme/videojs.css';
    $settings = array('videojs' => array(
        'autoPlay' => (int) variable_get('videojs_autoplay', ''),
        ));
    if ($add) {
      drupal_add_js($filepath);
      drupal_add_css($filepath_css);
      drupal_add_js($videojs_js);
      drupal_add_css($videojs_css);
      if (!$added) {
        drupal_add_js($settings, array('type' => 'setting'));
        $added = TRUE;
      }
    }
    $return = array(
      'js' => array(
        array('data' => $filepath),
        array('data' => $videojs_js),
        array('data' => $settings, 'type' => 'setting'),
      ),
      'css' => array(
        array('data' => $filepath_css),
        array('data' => $videojs_css),
        array('data' => $directory . '/skins/hu.css'),
        array('data' => $directory . '/skins/tube.css'),
        array('data' => $directory . '/skins/vim.css'),
      ),
    );
  }

  return $return;
}

/**
 * Return the version of video JS installed.
 *
 * @param $directory
 *   The directory to check for a videojs installation.
 */
function videojs_get_version($directory = NULL) {
  $version = 0;

  if (!isset($directory)) {
    $directory = variable_get('videojs_directory', 'sites/all/libraries/video-js');
  }

  if (file_exists($directory . '/video.js')) {
    $contents = file_get_contents($directory . '/video.js');
  }
  else
    return FALSE;

  $matches = array();
  preg_match('/v.?[ ]*([\d.]+)/i', $contents, $matches);

  if (isset($matches[0])) {
    $version = substr($matches[0], 1);
  }

  return $version;
}
