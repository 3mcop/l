<?php

/**
 * @file
 * Pages specific to LWtS that were prohibitively difficult to do using
 * the Panels module.
 */

// GENERICISE LATER!!!! Don't be trapped in to making very generic fns first

/**
 * Implements hook_menu()
 */
function lwts_custom_pages_menu() {

  $items = array();

  // Home page
  $items['home-page'] = array (
    'title' => 'Home',
    'description' => 'See the latest from Live with the Sea',
    'access callback' => TRUE,
    'page callback' => '_lwts_custom_pages_home_page',
  );

  //// Home page
  //$items['home-page-old'] = array (
  //  'title' => 'Home',
  //  'description' => 'See the latest from Live with the Sea',
  //  'access callback' => TRUE,
  //  'page callback' => '_lwts_custom_pages_page_callback',
  //);

  return $items;
}

/**
 * Implements hook_menu_alter()
 *
 * Overriding default taxonomy term pages.
 * See _lwts_custom_pages_taxonomy_term_page()
 */
function lwts_custom_pages_menu_alter( &$menu ) {

  $menu['taxonomy/term/%taxonomy_term']['page callback'] =
    '_lwts_custom_pages_taxonomy_term_page';
  unset( $menu['taxonomy/term/%taxonomy_term']['file'] );
  $menu['taxonomy/term/%taxonomy_term']['module'] = 'lwts_custom_pages';

  return $menu;
}

/**
 * Page callback for taxonomy pages.
 *
 * Diverting requests for terms from some vocabularies to custom pages.
 *
 * @param $term
 *   The term object for the requested taxonomy term.
 *
 * @return
 *   String containing the page markup.
 */
function _lwts_custom_pages_taxonomy_term_page( $term ) {

  switch( $term->vid ) {

  case 3 : // Topic
    drupal_set_title( $term->name );

    // Get sub-topics of the current term.
    $topics = taxonomy_get_tree( $term->vid, $term->tid, 1 );

    if ( empty( $topics ) ) {
      // The given topic has no sub-topics.
      // Display page appropriate to a leaf topic.
      return _lwts_custom_pages_leaf_topic_page( $term );
    }
    else {
      // The given topic has sub-topics.
      // Show summary for each sub-topic.
      return _lets_custom_pages_sibling_topics_page( $term, NULL );
    }

//  case 2 : // Knowledge type
  case 4 : // Location
    drupal_set_title( $term->name );
    return _lets_custom_pages_sibling_topics_page( NULL, $term );

  default:
    // Returns the default term page provided by taxonomy module.
    module_load_include('inc', 'taxonomy', 'taxonomy.pages');
    return taxonomy_term_page( $term );
  }
}

function _to_css( $text ) {
  return strtolower( str_replace( ' ', '-', $text ) );
}

/**
 * Show latest articles for given topic.
 *
 * @param $topic
 *   The $topic for which to display nodes.
 *
 * @return
 *   Markup for the custom page.
 */
function _lwts_custom_pages_leaf_topic_page( $topic ) {

  $teaser_view_template = views_get_view('get_one_article');

  $result = '<div class="lwts-custom-page lwts-custom-page-' .
    _to_css( $topic->name ) . '">';

  // HACK - hard-coded
  $max_rows = 5;
  $action_tid = 2;
  $education_tid = 1;
  $display_name = 'block_2';

  // Irrelevant in the context of this function. Included for readability.
  $topic_depth = 0;
  $nids_to_exclude = NULL;

  // Iterate over the rows to display. (May terminate early.)
  for ( $i = 0; $i < $max_rows; $i++ ) {

    // Clone the action and education views and set their pager offsets.
    unset( $views );
    $views = array();
    $views[0] = $teaser_view_template->clone_view();
    $views[0]->display[$display_name]->display_options['pager']['options']['offset'] = $i;
    $views[1] = $teaser_view_template->clone_view();
    $views[1]->display[$display_name]->display_options['pager']['options']['offset'] = $i;

    // "Preview" the views, calculating their results in the process.
    unset( $views_output );
    $views_output = array();
    $views_output[0] = $views[0]->preview( $display_name, array(
      $action_tid, $topic->tid, $topic_depth, $nids_to_exclude
    ) );
    $views_output[1] = $views[1]->preview( $display_name, array(
      $education_tid, $topic->tid, $topic_depth, $nids_to_exclude
    ) );

    // Were no nodes found for display?
    if ( empty( $views[0]->result ) && empty( $views[1]->result ) ) {
      // No more rows to display.
      break;
    }

    // Each two-view row starts with a wrapping div.
    $result .= '<div class="lwts-custom-page-row-outer clearfix">';

    // Iterate over the two previewed views.
    for ( $j = 0; $j < 2;  $j++ ) {

      // Does the current view have a result?
      if ( !empty( $views[$j]->result[0] ) ) {

        // Show teaser result wrapped in a div identifying the Knowledge type.
        $node_id = $views[$j]->result[0]->nid;
        $knowledge_type =
          _lwts_custom_pages_get_knowledge_type_css_class( $node_id );
        $result .=
          '<div class="lwts-custom-page-view-pane ' . $knowledge_type . '">';
        $result .= $views_output[$j];
        $result .= '</div>';
      }
      else { // no result

        // Output an empty div to allow proper spacing.
        $result .= '<div class="lwts-custom-page-view-pane empty"></br></div>';
      }
    }
    $result .= '</div>'; // outer row
  }
  $result .= '</div>'; // page

  return $result;
}

/**
 * Get markup for a two column view of articles.
 *
 * @param $base_topic
 *   The topic term for which sub-topics should be displayed.
 *   The vocabulary root will be used if this argument is NULL.
 * @param $constraint_term
 *   A constraining term with which all articles must be tagged.
 *   No constraining term is used when this argument is NULL.
 */
function _lets_custom_pages_sibling_topics_page( $base_topic = NULL, $constraint_term = NULL ) {

  // Did calling function supply a base topic?
  if ( empty( $base_topic ) ) {
    // Bit of a HACK - No base topic so use top level topics. Mock up a
    // 'term' for the root of the Topic vocabulary.
    $base_topic = new StdClass;
    $base_topic->vid = 3;
    $base_topic->tid = 0;
  }

  // Get the set of topics over which to iterate.
  $topics = taxonomy_get_tree( $base_topic->vid, $base_topic->tid, 1 );

  // Get the views used to display the articles. A new view will be cloned
  // from these templates for each set of arguments.
  $teaser_view_template = views_get_view('get_one_article');
  $titles_view_template = views_get_view('get_article_titles');

  // Get the input required for the views for the given constraining term.
  $constraint =
    !empty( $constraint_term ) ? $constraint_term->tid : 'all';

  // Hard coded depth to descend topics for relevant articles.
  $topic_depth = 10;

  // Collect nodes already shown in teaser form so that we don't show the
  // same one twice.
  $featured_nodes = array();

  // Page markup starts with a wrapping div.
  $label = _to_css(
    !empty( $constraint_term ) ? $constraint_term->name : $base_topic->name );
  $result =
    '<div class="lwts-custom-page lwts-custom-page-' . $label . '">';


  foreach ( $topics as $topic ) {

    // Each two-view row starts with a wrapping div.
    $result .= '<div class="lwts-custom-page-row-outer clearfix">';

    // Get the teaser for the featured article for this topic
    $view = $teaser_view_template->clone_view();
    $nids_to_exclude =
      empty( $featured_nodes ) ? NULL : implode( $featured_nodes, '+' );
    $view_output = $view->preview( 'block_2', array(
      $constraint, $topic->tid, $topic_depth, $nids_to_exclude
    ) );

    // Keep track of featured article so we don't show it in the second
    // view for the current topic.
    $top_article_nid = NULL;

    // Was an article found for display?
    if ( !empty( $view->result ) ) {

      $top_article_nid = $view->result[0]->nid;
      $featured_nodes[] = $top_article_nid;

      $result .= '<h3>' . $topic->name . '</h3>';

      // Inner row div to separate heading from view panes. 
      $result .= '<div class="lwts-custom-page-row-inner clearfix">';

      // Show teaser wrapped in a div that identifies the Knowledge type.
      $knowledge_type =
        _lwts_custom_pages_get_knowledge_type_css_class( $top_article_nid );
      $result .=
        '<div class="lwts-custom-page-view-pane ' . $knowledge_type . '">';
      $result .= $view_output;
      $result .= '</div>'; // view-pane

      // Show titles of other articles for the current topic.
      $view = $titles_view_template->clone_view();
      $result .= '<div class="lwts-custom-page-view-pane">';
      $result .= $view->preview( 'default', array(
        $constraint, $topic->tid, $topic_depth, $top_article_nid
      ) );
      $result .= '</div>'; // view-pane
    }

    $result .= '</div></div>'; // inner and outer rows
  }
  $result .= '</div>'; // page

  return $result;
}

/**
 * For the given node, determine the name of it's Kowledge type term.
 *
 * @param $node_id
 *   The ID of the node for which to determine Knowledge type.
 *
 * @return
 *   The name of the Knowledge type with which the given node is tagged.
 */
function _lwts_custom_pages_get_knowledge_type_css_class( $node_id ) {
  $node = node_load( $node_id );
  $lang = $node->language;
  $tid = $node->field_knowledge_type[$lang][0]['tid'];

  // ULTRA HACK - fragile - change to vocabulary will break this.
  $css_class = ( $tid == 1 ? 'education' : 'action' );

  return $css_class;
}

/**
 * Embedded views home page.
 */
function _lwts_custom_pages_home_page() {

  $result = '<div class="lwts-custom-pages-home-page">';

  $knowledge_type_vid = 2;
  list( $output, $nodes ) = _lwts_custom_pages_get_top_level_vocab_teasers(
    $knowledge_type_vid, array(), 2 );
  $result .= $output;

  $topic_vid = 3;
  list( $output, $nodes ) =
    _lwts_custom_pages_get_top_level_vocab_teasers( $topic_vid, $nodes, 3 );
  $result .= $output;

  $result .= '</div>';

  return $result;
}

function _lwts_custom_pages_get_top_level_vocab_teasers( $vocab_id, $nodes_to_exclude, $max_cols ) {

  $result = '<div class="lwts-custom-page-vocabulary ' .
    'lwts-custom-page-vocabulary-' . $vocab_id . ' clearfix">';

  $view_template = views_get_view('get_one_article');
  $view_display_name = $max_cols == 2 ? 'block_2' : 'block_1';
  $terms = taxonomy_get_tree( $vocab_id, 0, 1 );
  $num_cols = min( count( $terms ), $max_cols );
  $index = 1;
  $topic_depth = 10;
  $pane = 1;

  foreach( $terms as $term ) {

    // Is this the first column in the row?
    if ( $index % $num_cols == 1 ) {
      // Open row
      $result .= '<div class="lwts-custom-page-row clearfix">';
    }

    unset( $view );
    $view = $view_template->clone_view();
    $exclude =
      empty( $nodes_to_exclude ) ? NULL : implode( $nodes_to_exclude, '+' );

    // Is the given term is a topic.
    if ( $vocab_id == 3 ) {
      // Topics are treated differently - they use depth
      $output = $view->preview( $view_display_name, array(
        'all', $term->tid, $topic_depth, $exclude
      ) );
    }
    else {
      // The given term is not a topic. It is a "constraint" term.
      $output = $view->preview( $view_display_name, array(
        $term->tid, 'all', $topic_depth, $exclude
      ) );
    }

    if ( !empty( $view->result ) ) {

      $node_id = $view->result[0]->nid;
      $nodes_to_exclude[] = $node_id;
      $knowledge_type =
        _lwts_custom_pages_get_knowledge_type_css_class( $node_id );

      $result .= '<div class="lwts-custom-page-view-pane-outer columns-'
        . $num_cols .'" id="vocab-' . $vocab_id .'-pane-' . $pane . '">';
      $pane++;
      $result .= '<h3>' . $term->name . '</h3>';
      $result .= '<div class="lwts-custom-page-view-pane-inner '
        . $knowledge_type . '">';
      $result .= $output; 
      $result .= '</div></div>';

      // Is this the last column in the row?
      if ( ( $index % $num_cols ) == 0 ) {
        // Close row
        $result .= '</div>';
      }
    }

    $index++;
  }

  // Is the current row unfinished?
  if ( $index % $num_cols != 1 ) {

    //// Finish off the row.
    //while ( $index % $num_cols != 0 ) {
    //$result .= '<div class="lwts-custom-page-view-pane empty ' .
    //  $num_cols .'-columns"></br></div>';
    //  $index++;
    //}
    $result .= '</div>';
  }

  $result .= '</div>';  // vocab
  return array( $result, $nodes_to_exclude );
}


///////// OLD HOME PAGE CODE COMMENTED OUT BELOW //////////////

///**
// * Page callback for the home page.
// */
//function _lwts_custom_pages_page_callback() {
//
//  $page_id = arg(0);
//  $required_term_name = arg(1);
//  $config = _lwts_custom_pages_get_page_config( $page_id );
//  if ( !empty( $required_term_name ) ) {
//    $required_term = array_pop( taxonomy_get_term_by_name( arg(1)) );
//    //dsm( $required_term);
//    drupal_set_title( $required_term->name );
//  }
//  else {
//    $required_term = NULL;
//  }
//
//  // Get the terms for each node that is tagged with a term from the
//  // relevant vocabularies.
//  $node_terms = _lwts_custom_pages_get_node_terms(
//    $config->sort_property,
//    $config->is_sticky_applies,
//    $config->vids,
//    empty($required_term) ? NULL : $required_term->tid
//  );
//  //dsm( $node_terms );
//
//  $result =
//    '<div class="lwts-custom-page lwts-custom-page-' . $page_id . '">';
//
//  foreach ( $config->vids as $vid ) {
//    $tree = _lwts_custom_pages_get_vocabulary_tree( $vid );
//    //dsm( $tree );
//    $top_level_terms = _lwts_custom_pages_compress_vocabulary_tree( $tree );
//    //dsm( $top_level_terms );
//
//    $nodes_to_display = _lwts_custom_pages_get_nodes_to_display(
//      &$node_terms, $top_level_terms );
//    //dsm( $nodes_to_display );
//
//    $class = 'vocabulary-' . $vid;
//    $num_cols = min( count( $top_level_terms ), $config->max_cols );
//    drupal_add_css( _lwts_custom_pages_get_css( $class, $num_cols ),
//      array( 'type' => 'inline' ) );
//
//    $result .= '<div class="vocabulary ' . $class . ' clearfix">';
//    $result .= '<div class="lwts-custom-page-row clearfix">';
//    $index = 1;
//    foreach ( $nodes_to_display as $term_id => $node ) {
//
//      // HALF A HACK - Hard coded term names - it does stop a renamed
//      // taxonomy from spoiling the CSS.
//      $classes = in_array( 1, $node['terms'] ) ? 'Education' : 'Action';
//
//      $result .= _lwts_custom_pages_get_rendered_node(
//        $term_id, $node['nid'], 'teaser', $classes );
//
//      // Was this the last node in the row?
//      if ( ( $index % $num_cols ) == 0 ) {
//        $result .= '</div><div class="lwts-custom-page-row clearfix">';
//      }
//      $index++;
//    }
//    $result .= '</div></div>';
//  }
//  $result .= '</div>';
//
//  return $result;
//}
//
//function _lwts_custom_pages_get_required_term( $term_name ) {
//}
//
//function _lwts_custom_pages_get_page_config( $page_id ) {
//
//  // HACK// HACK// HACK// HACK// HACK// HACK      // HACK!!!!!!
//  // Replace switch with variable_get() calls and per-page config pages.
//
//  $result = new StdClass;
//
//  switch ( $page_id ) {
//  case 'home-page' :
//    $result->sort_property = 'created';
//    $result->is_sticky_applies = TRUE;
//    $result->vids = array( 2, 3 );
//    $result->max_cols = 3;
//    break;
//  case 'origin' :
//    $result->sort_property = 'created';
//    $result->is_sticky_applies = TRUE;
//    $result->vids = array( 2, 3 );
//    $result->max_cols = 3;
//    break;
//  }
//  return $result;
//}
//
///**
// * Get data from nodes tagged with terms from a given set of vocabularies.
// *
// * @todo genericise more - sorting currently restricted to a colum in the
// * node table, which won't work for user ratings or most visited.
// *
// * @param $sort_property_column string
// *   The name of a column in the node table on which to sort
// * @param $is_sticky_applies boolean
// *   Should sticky nodes come at the top of the list?
// * @param $vids array( integer )
// *   The set of vocabulary ids that should be considered.
// * @param $max_nodes integer
// *   The maximum number of nodes to load.
// * @param $required_tid
// *   The ID of the term that returned nodes must be tagged with, else NULL.
// *
// * @return
// *   array( node_id => array(  ) )
// */
//function _lwts_custom_pages_get_node_terms( $sort_property_column, $is_sticky_applies, $vids, $required_tid ) {
//
//  // Tables required:
//  // node - nid ( + sort_property )
//  // taxonomy_vocabulary - name
//  // taxonomy_term_data - to connect vocab to terms
//  // taxonomy_index - for node-term join
//  //
//  $query = db_select( 'node', 'n' );
//  $query->join( 'taxonomy_index', 'ti', 'ti.nid = n.nid' );
//  $query->join( 'taxonomy_term_data', 'ttd', 'ttd.tid = ti.tid' );
//  $query->join( 'taxonomy_vocabulary', 'tv', 'tv.vid = ttd.vid' );
//  $query->addField( 'n', 'nid', 'node_id' );
//  $query->addField( 'ttd', 'tid', 'term_id' );
//  $query->condition( 'tv.vid', $vids, 'IN' );
//
//  if ( $is_sticky_applies ) {
//    $query->orderBy( 'n.sticky', 'DESC' );
//  }
//
//  $query->orderBy( 'n.' . $sort_property_column, 'DESC' );
//  $query->orderBy( 'ttd.weight', 'ASC' );
//
//  if ( !empty( $required_term ) ) {
//    $subquery = db_select( 'taxonomy_index', 'ti' );
//    $subquery->addField( 'ti', 'nid', 'node_id' );
//    $subquery->condition( 'ti.tid', $required_tid );
//    $query->condition( 'n.nid', $subquery, 'IN' );
//  }
//
//  $result_set =  $query->execute();
//  $rows = array();
//  while ( $row = $result_set->fetchAssoc() ) {
//    $rows[ $row['node_id'] ][ $row['term_id'] ] = $row['term_id'];
//  }
//
//  //if ( !empty( $required_term ) ) {
//  //  global $_lwts_custom_pages_required_term;
//  //  $_lwts_custom_pages_required_term = $required_term;
//  //  $rows = array_filter(
//  //    $rows, '_lwts_custom_pages_includes_required_term' );
//  //}
//  return $rows;
//}
//
///**
// * Do the given terms include the (global) required term?
// *
// * Callback fn for array_filter.
// * Helper fn for _lwts_custom_pages_get_node_terms
// *
// * @param $terms
// *   An array of term IDs
// *
// * @return
// *   TRUE if the required term is present, else FALSE;
// */
//function _lwts_custom_pages_includes_required_term( $terms ) {
//  global $_lwts_custom_pages_required_term;
//  return in_array( $_lwts_custom_pages_required_term, $terms );
//}
//
///**
// * Get the term IDs of a vocabulary keyed by root terms.
// *
// * @param $vid integer
// *   The ID of the required vocabulary
// *
// * @return
// *   array( top_level_tid => array( child_ID ) )
// */
//function _lwts_custom_pages_get_vocabulary_tree( $vid ) {
//
//  $terms = taxonomy_get_tree( $vid );
//  $branches = array();
//
//  // Collect terms according to parentage
//  foreach ( $terms as $term ) {
//    $tid = $term->tid;
//    $parent = $term->parents[0];  // HACK - Assumes single parent!
//
//    if ( empty($branches[$parent]) ) {
//      $branches[$parent] = array();
//      $branches[$parent]['tid'] = $parent;
//      $branches[$parent]['children'] = array();
//    }
//    $branches[$parent]['children'][$tid] =
//      array( 'tid' => $tid, 'children' => array() );
//  }
//
//  // Build tree
//  $root = $branches['0'];
//  unset( $branches['0'] );
//  _lwts_custom_pages_assign_child_terms( &$root, &$branches );
//  return $root;
//}
//
///**
// * Helper fn to convert terms array to tree.
// *
// * @param $current_term
// *   A term (already inserted in to the tree) that has children.
// *   array( 'tid' => term ID, 'children' => array( term ID of child ) )
// * @param $branches
// *   Array of terms with children, not yet placed in tree.
// */
//function _lwts_custom_pages_assign_child_terms( &$current_term, &$branches ) {
//
//  // Iterate through the IDs of the children of the current term.
//  foreach ( $current_term['children'] as $child ) {
//
//    // Iterate through the unconnected branches.
//    foreach ( $branches as $branch ) {
//
//      // Is the branch a child of the current term?
//      if ( $child['tid'] === $branch['tid'] ) {
//
//        // Move the branch to its place in the heirarchy.
//        $current_term['children'][ $child['tid'] ] = $branch;
//        unset( $branches[$child['tid']] );
//
//        if ( !empty( $current_term['children'][ $child['tid'] ]['children'] ) ) {
//          _lwts_custom_pages_assign_child_terms(
//            $current_term['children'][ $child['tid'] ], $branches );
//        }
//      }
//    }
//  }
//}
//
///**
// * In a vocab tree, make all terms immediate children of top level terms.
// *
// * @param $tree
// *   A vocabulary tree as returned by _lwts_custom_pages_get_vocabulary_tree
// *
// * @return
// *   array( top_level_term_ID => array( all sub term IDs of any depth )
// */
//function _lwts_custom_pages_compress_vocabulary_tree( $tree ) {
//
//  // Add the IDs of all sub-terms, of any depth, to the children of the
//  // top level term.
//  $top_level_terms = array();
//  foreach ( $tree['children'] as $top_level_term ) {
//    foreach ( $top_level_term['children'] as $sub_term ) {
//      _lwts_custom_pages_add_sub_term_ids_to_top_level( &$top_level_term, $sub_term );
//    }
//    $top_level_terms[] = $top_level_term;
//  }
//
//  // Simplify the structure of the top level term array from
//  //   array( 'tid' => ID, 'children' => array( IDs ) )
//  // to
//  //   array( ID => array( own/sub-term ID => own/sub-term ID ) )
//  $result = array();
//  foreach ( $top_level_terms as $top_level_term ) {
//    $result[ $top_level_term['tid'] ] = $top_level_term['children'];
//    $result[ $top_level_term['tid'] ][ $top_level_term['tid'] ] =
//      $top_level_term['tid'];
//  }
//  return $result;
//}
//
///**
// * Add the sub-term ID to the children of the top level term.
// *
// * @param $top_level_term
// *   Top level taxonomy term. array( 'tid' => ID, 'children' => array() )
// * @param $sub_term
// *   A taxonomy term of depth > 1. Same structure as top level term.
// */
//function _lwts_custom_pages_add_sub_term_ids_to_top_level( &$top_level_term, $sub_term ) {
//
//  // Copy children of the sub_term so that they do not get overwritten.
//  $sub_sub_terms = $sub_term['children'];
//
//  // Add the ID of the sub_term to the children of the top level term,
//  // replacing the existing associative array.
//  $top_level_term['children'][ $sub_term['tid'] ] = $sub_term['tid'];
//
//  foreach( $sub_sub_terms as $sub_sub_term ) {
//    _lwts_custom_pages_add_sub_term_ids_to_top_level( &$top_level_term, $sub_sub_term );
//  }
//}
//
///**
// * For each top level term, get a unique node tagged with that term.
// *
// * @param $node_terms
// *   array( Node ID => array( term IDs ) )
// * @param $top_level_terms
// *   array( top level term ID => array( top level + sub-term IDs ) )
// *
// * @return
// *   A set of unique nodes. array( top level term ID => node ID )
// */
//function _lwts_custom_pages_get_nodes_to_display( &$node_terms, $top_level_terms ) {
//
//  $result = array();
//
//  foreach ( $top_level_terms as $top_level_term_id => $term_descendants ) {
//
//    reset( $node_terms );
//
//    // Iterate through available nodes.
//    while ( list( $node_id, $node_term_set ) = each( $node_terms ) ) {
//
//      // Is this node tagged with the current term or its descendants?
//      if ( array_intersect( $node_term_set, $term_descendants ) ) {
//
//        // Found a node to display. Remove it from array and exit loop.
//        $result[$top_level_term_id]['nid'] = $node_id;
//        $result[$top_level_term_id]['terms'] = $node_term_set;
//        unset( $node_terms[$node_id] );
//        break;
//      }
//    }
//  }
//  return $result;
//}
//
///**
// * Get the CSS necessary to make the page look panel-like.
// *
// * @param $vocab_class
// *   An (html attribute) class that identifies a given vocabulary.
// * @param $num_cols
// *   The number of columns for the given vocabulary.
// *
// * @return
// *   A string containing CSS for taxonomy-term "panes".
// */
//function _lwts_custom_pages_get_css( $vocab_class, $num_cols ) {
//
//  $width = ( 100.0 / $num_cols ) - 2.0;
//  $css = '.' . $vocab_class . ' .taxonomy-term{float:left;width:' .
//    $width . '%;padding:0 0.5em;}';
//  //dsm( $css );
//  return $css;
//}
//
///**
// * Get the markup to show a given term-related node.
// *
// * @param $term_id
// *   The ID of the term that the node is related to.
// * @param $node_id
// *   The ID of the node to be displayed.
// * @param $view
// *   The kind of view to show, e.g. 'teaser', 'full', 'something-else'
// * @param $classes
// *   As string containing any classes to be added to the node-wrapping div.
// *
// * @return
// *   Returns the markup for the term-related node.
// */
//function _lwts_custom_pages_get_rendered_node( $term_id, $node_id, $view, $classes ) {
//
//  $result = '';
//
//  // get term name
//  $term = taxonomy_term_load( $term_id );
//  $clean_term_name = strtolower( str_replace( ' ', '-', $term->name ) );
//
//  // div - term name
//  $result .= '<div class="taxonomy-term taxonomy-term-' . $term_id . ' ' .
//    $clean_term_name . ' ' . $classes . '">';
//
//  // render term name
//  $result .= '<h3>' . $term->name . '</h3>';
//
//  // render node as teaser
//  $result .= '<div class="term-related-node clearfix">';
//  $result .= drupal_render( node_view( node_load( $node_id ), $view ) );
//  $result .= '</div>';
//  
//  // close div - term name
//  $result .= '</div>';
//
//  return $result;
//}




// HOOK_???? When taxonomy term added or removed from primary or secondary
//      vocab - recalculate column widths - css
//
// Admin settings form. When max columns changes - recalc col widths - css
